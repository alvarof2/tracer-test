name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v1.0.0)'
        required: true
        type: string

permissions:
  contents: write
  packages: write
  attestations: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            suffix: linux-amd64
          - goos: linux
            goarch: arm64
            suffix: linux-arm64
          - goos: darwin
            goarch: amd64
            suffix: darwin-amd64
          - goos: darwin
            goarch: arm64
            suffix: darwin-arm64
          - goos: windows
            goarch: amd64
            suffix: windows-amd64.exe
          - goos: windows
            goarch: arm64
            suffix: windows-arm64.exe

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'

    - name: Get dependencies
      run: go mod download

    - name: Run tests
      run: go test -v ./...

    - name: Build
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        go build -ldflags="-s -w -X main.version=${{ github.ref_name }}" -o tracer-test-${{ matrix.suffix }} .

    - name: Calculate file digest
      id: digest
      run: |
        DIGEST=$(sha256sum tracer-test-${{ matrix.suffix }} | cut -d' ' -f1)
        echo "digest=sha256:$DIGEST" >> $GITHUB_OUTPUT

    - name: Generate provenance attestation
      uses: actions/attest-build-provenance@v3
      with:
        subject-name: tracer-test-${{ matrix.suffix }}
        subject-digest: ${{ steps.digest.outputs.digest }}
        push-to-registry: false

    - name: Install cosign
      uses: sigstore/cosign-installer@v3
      with:
        cosign-release: 'v2.2.4'

    - name: Sign binary
      run: |
        cosign sign-blob --yes --bundle tracer-test-${{ matrix.suffix }}.sig tracer-test-${{ matrix.suffix }}
      env:
        COSIGN_EXPERIMENTAL: 1

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: tracer-test-${{ matrix.suffix }}
        path: |
          tracer-test-${{ matrix.suffix }}
          tracer-test-${{ matrix.suffix }}.sig

  docker:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Get tag name
      id: get_tag
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
        else
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=tag
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build-push
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        provenance: true
        sbom: true
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Wait for image to be available
      run: |
        echo "Waiting for Docker image to be fully pushed..."
        sleep 10

    - name: Generate SBOM attestation
      uses: actions/attest-sbom@v3
      with:
        subject-name: ghcr.io/${{ github.repository }}
        subject-digest: ${{ steps.build-push.outputs.digest }}
        push-to-registry: true

    - name: Generate Docker image provenance attestation
      uses: actions/attest-build-provenance@v3
      with:
        subject-name: ghcr.io/${{ github.repository }}
        subject-digest: ${{ steps.build-push.outputs.digest }}
        push-to-registry: true

    - name: Sign Docker image
      uses: sigstore/cosign-installer@v3
      with:
        cosign-release: 'v2.2.4'

    - name: Sign the published Docker image
      run: |
        cosign sign --yes ghcr.io/${{ github.repository }}:${{ steps.get_tag.outputs.tag }}
        cosign sign --yes ghcr.io/${{ github.repository }}:latest
      env:
        COSIGN_EXPERIMENTAL: 1

  release:
    needs: [build, docker]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Create checksums
      run: |
        cd artifacts
        for file in */tracer-test-*; do
          sha256sum "$file" > "$file.sha256"
        done

    - name: List files for debugging
      run: |
        find artifacts -type f -name "tracer-test-*" | sort

    - name: Get tag name
      id: get_tag
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
        else
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.get_tag.outputs.tag }}
        name: Release ${{ steps.get_tag.outputs.tag }}
        body: |
          ## Tracer Test ${{ steps.get_tag.outputs.tag }}
          
          HTTP Client with OTLP Tracing - A Go program that makes HTTP GET requests to a configurable URL and sends distributed traces via OpenTelemetry Protocol (OTLP).
          
          ### Features
          - HTTP GET requests with configurable intervals
          - OpenTelemetry (OTLP) distributed tracing
          - Structured JSON logging with configurable levels
          - Detailed network instrumentation (DNS, TCP, HTTP)
          - Automatic protocol detection (HTTP/HTTPS)
          - Health check endpoints (/health, /ready, /metrics)
          - Trace correlation in logs (trace ID and span ID)
          - SLSA Level 3 provenance attestations for supply chain security
          - Software Bill of Materials (SBOM) for dependency transparency
          - Cryptographic signatures for all artifacts (binaries and Docker images)
          
          ### Downloads
          
          **Docker Image:**
          ```bash
          # Pull the latest image
          docker pull ghcr.io/${{ github.repository }}:latest
          
          # Pull specific version
          docker pull ghcr.io/${{ github.repository }}:${{ steps.get_tag.outputs.tag }}
          
          # Run the container
          docker run -p 8080:8080 ghcr.io/${{ github.repository }}:latest
          ```
          
          **Binary Downloads:**
          
          **Linux:**
          - `tracer-test-linux-amd64` - Linux x86_64
          - `tracer-test-linux-arm64` - Linux ARM64
          
          **macOS:**
          - `tracer-test-darwin-amd64` - macOS x86_64 (Intel)
          - `tracer-test-darwin-arm64` - macOS ARM64 (Apple Silicon)
          
          **Windows:**
          - `tracer-test-windows-amd64.exe` - Windows x86_64
          - `tracer-test-windows-arm64.exe` - Windows ARM64
          
          ### Usage
          
          **Docker:**
          ```bash
          # Basic usage
          docker run -p 8080:8080 ghcr.io/${{ github.repository }}:latest
          
          # Custom URL and interval
          docker run -p 8080:8080 ghcr.io/${{ github.repository }}:latest \
            -url "https://api.example.com/data" -interval 10s
          
          # External OTLP endpoint with debug logging
          docker run -p 8080:8080 ghcr.io/${{ github.repository }}:latest \
            -otlp-endpoint "https://your-otlp-endpoint.com" -log-level debug
          
          # Disable OTLP tracing for testing
          docker run -p 8080:8080 ghcr.io/${{ github.repository }}:latest \
            -disable-otlp -log-format console
          ```
          
          **Binary:**
          ```bash
          # Basic usage
          ./tracer-test
          
          # Custom URL and interval
          ./tracer-test -url "https://api.example.com/data" -interval 10s
          
          # External OTLP endpoint with debug logging
          ./tracer-test -otlp-endpoint "https://your-otlp-endpoint.com" -log-level debug
          
          # Disable OTLP tracing for testing
          ./tracer-test -disable-otlp -log-format console
          ```
          
          ### Verification
          
          **SHA256 Checksums:**
          ```bash
          sha256sum -c tracer-test-<platform>.sha256
          ```
          
          **Cryptographic Signatures:**
          ```bash
          # Verify Docker image signature
          cosign verify --yes ghcr.io/${{ github.repository }}:${{ steps.get_tag.outputs.tag }}
          
          # Verify binary signature
          cosign verify-blob --certificate-identity-regexp=".*" --certificate-oidc-issuer-regexp=".*" \
            --signature tracer-test-<platform>.sig tracer-test-<platform>
          ```
        files: |
          artifacts/*/tracer-test-*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
